apply plugin: 'com.android.application'
apply plugin: 'realm-android' //依赖Realm数据库，插件化依赖
apply from: './tinker.gradle'
apply plugin: 'com.imooc.gradle.study'
//apply plugin: 'com.mob.sdk'

android {
    compileSdk rootProject.ext.android.compileSdk

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdk rootProject.ext.android.minSdk
        targetSdk rootProject.ext.android.targetSdk
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled rootProject.ext.android.multiDexEnabled //突破应用方法数65535的一个限制
        manifestPlaceholders = rootProject.ext.android.manifestPlaceholders

        ndk{
            abiFilters "armeabi-v7a", "arm64-v8a"//, "x86", "x86_64"
        }
    }

    signingConfigs {
        //签名打包
        release {
            storeFile file(rootProject.ext.signConfigs.storeFile)
            storePassword rootProject.ext.signConfigs.storePassword
            keyAlias rootProject.ext.signConfigs.keyAlias
            keyPassword rootProject.ext.signConfigs.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
        lintConfig file("lint.xml")
    }

    //recommend
    dexOptions {
        jumboMode = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.java.javaVersion
        targetCompatibility rootProject.ext.java.javaVersion
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs'] //修改so库存放位置

            res.srcDirs = ['src/main/res',
                           'src/main/res-ad',
                           'src/main/res-player']
        }
    }

//    productFlavors {
//        baidu {}
//        google {}
//    }
}

//为应用程序添加第三方库依赖
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependence.libSupportV7
    implementation rootProject.ext.dependence.libSupportMultidex
    //依赖library工程
    implementation project(rootProject.ext.dependence.libCommonLibrary)
    implementation project(rootProject.ext.dependence.libPullAlive)
    implementation rootProject.ext.dependence.libCircleImageView
    implementation rootProject.ext.dependence.libSystembarTint
    //添加友盟统计
    implementation rootProject.ext.dependence.libUmengAnalytics
    implementation rootProject.ext.dependence.libUniversalImageLoader
    implementation rootProject.ext.dependence.libOkhttp
    //okttp依赖
    //compile 'com.github.chrisbanes:PhotoView:1.3.0'
    implementation(rootProject.ext.dependence.libAutoScrollViewPager) {
        exclude module: 'support-v4' //排除依赖
        transitive false //禁止传递依赖
    }
    implementation rootProject.ext.dependence.libSlidableActivity
    //滑动关闭Activity库
    implementation rootProject.ext.dependence.libAndfix
    //阿里热修复andfix
    implementation rootProject.ext.dependence.libLogger
    //日志库logger
    //Tinker相关依赖
    implementation(rootProject.ext.dependence.libTinker) {
        changing = true //每次都从服务端拉取
    }
    annotationProcessor(rootProject.ext.dependence.libTinkerAndroid) { changing = true }

    implementation 'cn.jiguang.sdk:jpush:5.0.7'        // 必选，此处以JPush 5.0.7 版本为例，注意：5.0.0 版本开始可以自动拉取 JCore 包，无需另外配置
    implementation 'cn.jiguang.sdk:joperate:2.0.2'     // 可选，集成极光分析SDK后，即可支持行为触发推送消息、推送转化率统计，用户行为分析和用户标签等功能
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.kun:MPChartLib:1.0.6'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'org.apache.mina:mina-core:2.2.2'
    implementation "com.google.zxing:core:3.5.2"
    implementation 'com.nineoldandroids:library:2.4.0'
}

//repositories {
//    flatDir {
//        dirs 'libs'
//    }
//}

/**
 * 为自定义插件传递参数
 */
imoocReleaseInfo {
    versionCode = rootProject.ext.android.versionCode
    versionName = rootProject.ext.android.versionName
    versionInfo = '第8个版本。。。'
    fileName = 'releases.xml'
}

this.afterEvaluate {
    this.android.applicationVariants.all { variant ->
//        def output = variant.outputs.first()
//        def apkName = "app-${variant.baseName}" +
//                "-${variant.versionName}.apk"
//        output.outputFile = new File(output.outputFile.parent,
//                apkName)
//        println output.outputFile.name

        def task = variant.checkManifest
        println task.name
    }
}


